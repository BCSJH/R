x <- c(80,85,70)
x
x <- 80 #단일값일 경우 c()생략

#더하기
x <- 5 + 2
x

#나누기
x <- 5/3
x

#백터와 사칙연산
x <- c(1,2,3,4)
y <- c(2,3,4,5)
z <- c(1,2)
w <- x + y
w

#숫자와 문자가 합쳐있으면 숫자는 문자형으로 변환
#문자와 숫자의 합은 오류
y <- c("안녕", 1, 2)
y

#각각의 원소가 10 이하면 true, 아니면 false
y <- c(10,20,30)
z <- y <= 10
z


# 논리합 : |, 논리곱 : &
x <- TRUE
y <- FALSE
x | y
x & y

#논리 부정 -> 0이 아나면 모두 true 
x <- 3
!x
isTRUE(x)

#1~10까지의 정수 벡터 생성
x <- seq(1, 10)
x
x <- 1:10
x
x <- seq(1,10,by=3)
x
x <- seq(1,10,length.out = 5) #같은 간격으로 하는 5개의 숫자
x

#반복적인 값들의 벡터 만들기
x <- c(1,2,3)
rep(x, times=2)
rep(x, each=2)

#벡터의 원소
x <- c(1,2,3,4,5)
x[2]
x[c(1,3,5)] #2개 이상의 원소를 지정할 때는 c사용
x[-c(2,4)] # 2,4번째를 제외한 원소
x[x>2] #2보다 큰 원소 출력
x[x>=2 & x<=4] #2이상 4이하인 원소 값들만 출력
x[c(3,4)] <-15 #3,4번째 원소들의 값을 모두 15로 수정
x

#벡터에 대한 함수 사용
x <- seq(1:10)
sum(x)
mean(x) #평균
var(x) #x 벡터의 원소 값들의 분산
sd(x) #표준편차
sqrt(x) #x벡터의 각 원소 값의 재곱근
length(x) #x벡터의 원소값들의 개수

x <- c(1,2,-3)
abs(x) #x벡터의 각 원소값의 절댓값

#NULL
x <- NULL
is.null(x) #x가 NULL인 경우, True 반환

y <- c(1,2,3,NA,5)#4번째 요소 값이 없음
y

#무한대
z <- 10/0
z
z <- 0/0
z #숫자가 아님 : 부정


#1차원 배열
x <- array(1:3,dim=c(3))
x

#2차원 배열
x <- array(1:3,dim=c(2,3))
x
x <- array(c(2,4,6,8,10,12), dim =c(2,3))
x
x[1,2] <-20
x

#2차원 배열의 행과 열 이름 추가
names <- list(c("1행","2행"),c("1열","2열","3열"))
x <- array(c(2,4,6,8,10,12),dim=c(2,3),dimnames = names)
x

x<- matrix(1:6,nrow=2)
x
x<-matrix(1:6,nrow=2,byrow = TRUE)
x


#벡터 결합에 의한 행렬 만들기
v1 <- c(1,2,3,4)
v2 <- c(5,6,7,8)
v3 <- c(9,10,11,12)
x <- cbind(v1,v2,v3)
x
rownames(x) <- c("1행","2행","3행","4행")
x
colnames(x) <- c("1열","2열","3열")
x

#리스트만들기
x <- list("홍길동","20191009",20,c("IT","데이터관리"))
x <- list("성명"="홍길동","학번" = "20191009","나이" = 20,c("IT","데이터관리"))
x
x["성명"]


#dataframe만들기
x <- data.frame(성명=c("홍길동","손오공"),나이=c(20,30),주소=c("서울","부산"))
x
x <- cbind(x,학과=c("전산학","경영학"))
x <- rbind(x,data.frame(성명="장발장",나이=40,주소="파리",학과="전산학"))
x

x[3,]
x[,2]
x[-2,]
x["학과"]
x$학과
x$학과[2]

quakes #R에 내장된 quakes 데이터 세트 출력
head(quakes,n=10) #데이터의 앞부분 10개 행보기
tail(quakes,n=6) #데이터 뒷부분 일부 보기
names(quakes) #데이터세트의 변수명 보기
str(quakes) #데이터 세트의 데이터구조 보기

summary(quakes) #데이터 세트의 각 변수별 데이터 요약 정보

summary(quakes$mag)

#데이터 파일 저장하고 외부파일 읽기
write.table(quakes,"c:/temp/quakes.txt",sep=",")
x <- read.csv("c:/temp/quakes.txt",header=T)
x

#웹사이트의 데이터 파일 읽기 
url <- "https://vincentarelbundock.github.io/Rdatasets/csv/datasets/Titanic.csv"
x <- read.csv(url)
x

#함수 만들기
getCircleArea <- function(r){
  area <- 3.14*r^2
  return(area)
}
getCircleArea(3)

#파이 차트
x <- c(9,15,20,6)
label <- c("영업1팀", "영업2팀", "영업3팀", "영업4팀")
pie(x,labels=label,main="수서별 영업실적")

#바 차트
height <- c(9,15,20,6)
name <- c("영업1팀", "영업2팀", "영업3팀", "영업4팀")
barplot(height,names.arg = name,main="부서별 영업 실적",
        col=rainbow(length(height))
        ,xlab="부서", ylab="영업 실적(억 원)")


#애니메이션으로 카운트 다운
#install.packages("animation")
library(animation)

ani.options(interval=1)
plot.new()
for (i in 10:0){
  rect(0,0,1,1,col="yellow")
  text(0.5,0.5,i,cex=5,col=rgb(.2,.2,.2,.7))
  
  ani.pause()
  
}



